from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import os
from dotenv import load_dotenv
import google.generativeai as genai
from keyboards.inline.ideas import idea_difficulty_keyboard

# üß† –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è / –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–π
from database.ideas import save_idea, get_ideas_by_difficulty

router = Router()

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

model = genai.GenerativeModel("gemini-1.5-flash-latest")

@router.message(F.text == "üí° –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–¥–µ—é")
async def choose_difficulty(message: Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —ñ–¥–µ—ó:",
        reply_markup=idea_difficulty_keyboard()
    )

@router.callback_query(F.data.startswith("idea:"))
async def generate_idea_by_difficulty(callback: CallbackQuery):
    difficulty = callback.data.split(":")[1]

    # üß† –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–¥–µ—ó
    previous_ideas = get_ideas_by_difficulty(difficulty)
    context = "\n".join(f"- {idea}" for idea in previous_ideas)

    # üìù –ü—Ä–æ–º–ø—Ç —ñ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó
    prompt = f"""
–¢–∏ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è —Å–∫—Ä–∏–ø—Ç—ñ–≤ –Ω–∞ Python —Ä—ñ–≤–Ω—è {difficulty}.
–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–¥–µ—ó, —è–∫—ñ –≤–∂–µ –±—É–ª–∏:

{context if context else '(–©–µ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —ñ–¥–µ–π)'}

–ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω—É –Ω–æ–≤—É —ñ–¥–µ—é, —è–∫–∞ —Å—É—Ç—Ç—î–≤–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —É—Å—ñ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö.
–ù–∞–ø–∏—à–∏ –ª–∏—à–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Å–∫—Ä–∏–ø—Ç–∞, –±–µ–∑ –∫–æ–¥—É —ñ –∑–∞–π–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
"""

    try:
        await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–¥–µ—é...")
        await callback.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")

        response = model.generate_content(prompt)
        idea = response.text.strip()

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
        save_idea(difficulty, idea)

        await callback.message.edit_text(f"üí° –Ü–¥–µ—è ({difficulty}):\n{idea}")
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–¥–µ—ó:\n{e}")
