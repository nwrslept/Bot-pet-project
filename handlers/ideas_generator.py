from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import os
from dotenv import load_dotenv
import google.generativeai as genai
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.inline.ideas import idea_topic_keyboard, idea_difficulty_keyboard
from database.ideas import save_idea, get_ideas_by_topic_and_difficulty

router = Router()

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash-latest")

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏
class IdeaGeneration(StatesGroup):
    choosing_topic = State()
    choosing_difficulty = State()

# –°—Ç–∞—Ä—Ç ‚Äî –≤–∏–±—ñ—Ä —Ç–µ–º–∏
@router.message(F.text == "üí° –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–¥–µ—é")
async def choose_topic(message: Message, state: FSMContext):
    await state.set_state(IdeaGeneration.choosing_topic)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É —Å–∫—Ä–∏–ø—Ç–∞:",
        reply_markup=idea_topic_keyboard()
    )

# –í–∏–±—ñ—Ä —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ç–µ–º–∏
@router.callback_query(F.data.startswith("topic:"), IdeaGeneration.choosing_topic)
async def choose_difficulty(callback: CallbackQuery, state: FSMContext):
    topic = callback.data.split(":")[1]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–º—É —É FSM
    await state.update_data(topic=topic)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    await state.set_state(IdeaGeneration.choosing_difficulty)

    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —ñ–¥–µ—ó:",
        reply_markup=idea_difficulty_keyboard(topic)
    )
    await callback.answer()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–¥–µ—ó
@router.callback_query(F.data.startswith("idea:"), IdeaGeneration.choosing_difficulty)
async def generate_idea(callback: CallbackQuery, state: FSMContext):
    # callback.data = "idea:<topic>:<difficulty>"
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.edit_text("‚ö† –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
        return

    _, topic_from_callback, difficulty = parts

    # –î–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ –±–µ—Ä–µ–º–æ topic –∑—ñ —Å—Ç–∞–Ω—É FSM
    data = await state.get_data()
    topic = data.get("topic") or topic_from_callback

    previous_ideas = get_ideas_by_topic_and_difficulty(topic, difficulty)
    context = "\n".join(f"- {idea}" for idea in previous_ideas)

    prompt = f"""
–¢–∏ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ–¥–µ–π –¥–ª—è Python-—Å–∫—Ä–∏–ø—Ç—ñ–≤. –¢–µ–º–∞: {topic}. –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {difficulty}.
–ù–µ –ø–æ–≤—Ç–æ—Ä—é–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–¥–µ—ó:

{context if context else '(–©–µ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —ñ–¥–µ–π)'}

–ó–≥–µ–Ω–µ—Ä—É–π —É–Ω—ñ–∫–∞–ª—å–Ω—É –∫–æ—Ä–æ—Ç–∫—É —ñ–¥–µ—é —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å —Ç–∞ –∫–æ–¥—É.
"""

    try:
        await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–¥–µ—é...")
        await callback.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")

        response = model.generate_content(prompt)
        idea = response.text.strip()
        save_idea(topic, difficulty, idea)

        await callback.message.edit_text(f"üí° –Ü–¥–µ—è ({topic}, {difficulty}):\n{idea}")
        await callback.answer()

        # –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω:
        await state.clear()
    except Exception as e:
        await callback.message.edit_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–¥–µ—ó:\n{e}")
