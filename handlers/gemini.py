from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import main_menu_keyboard

import os
from dotenv import load_dotenv
import google.generativeai as genai

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑ gemini_history.py
from database.gemini_history import save_message, get_last_messages

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=GEMINI_API_KEY)

model = genai.GenerativeModel("gemini-1.5-flash-latest")

router = Router()

class ChatStates(StatesGroup):
    chatting = State()

@router.message(F.text == "ü§ñ –ß–∞—Ç –∑ Gemini")
async def start_chat(message: Message, state: FSMContext):
    await state.set_state(ChatStates.chatting)
    await message.answer("üß† –¢–∏ –≤ —á–∞—Ç—ñ –∑ Gemini. –ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è!\n–©–æ–± –≤–∏–π—Ç–∏ ‚Äî /exit")

@router.message(ChatStates.chatting, F.text == "/exit")
async def exit_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö™ –¢–∏ –≤–∏–π—à–æ–≤ –∑ —á–∞—Ç—É –∑ Gemini.", reply_markup=main_menu_keyboard())

@router.message(ChatStates.chatting)
async def chat_with_gemini(message: Message, state: FSMContext):
    user_input = message.text
    try:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        history = get_last_messages(message.from_user.id)

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –¥–ª—è Gemini
        context_text = "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —ñ –Ω–µ —Å–∏–ª—å–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ —è–∫—â–æ —Ü—å–æ–≥–æ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—É—Ç–≤–∞—á"
        for user_msg, bot_resp in history:
            context_text += f"User: {user_msg}\nBot: {bot_resp}\n"
        context_text += f"User: {user_input}\nBot:"

        response = model.generate_content(context_text)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Gemini
        save_message(message.from_user.id, user_input, response.text)

        await message.answer(response.text)
    except Exception as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini:\n{e}")
