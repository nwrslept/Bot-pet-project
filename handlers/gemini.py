from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import main_menu_keyboard

import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=GEMINI_API_KEY)

#—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
model = genai.GenerativeModel("gemini-1.5-flash-latest")

router = Router()

# –°—Ç–∞–Ω —á–∞—Ç—É
class ChatStates(StatesGroup):
    chatting = State()

@router.message(F.text == "ü§ñ –ß–∞—Ç –∑ Gemini")
async def start_chat(message: Message, state: FSMContext):
    await state.set_state(ChatStates.chatting)
    await message.answer("üß† –¢–∏ –≤ —á–∞—Ç—ñ –∑ Gemini. –ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è!\n–©–æ–± –≤–∏–π—Ç–∏ ‚Äî /exit")

@router.message(ChatStates.chatting, F.text == "/exit")
async def exit_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö™ –¢–∏ –≤–∏–π—à–æ–≤ –∑ —á–∞—Ç—É –∑ Gemini.", reply_markup=main_menu_keyboard())

@router.message(ChatStates.chatting)
async def chat_with_gemini(message: Message, state: FSMContext):
    user_input = message.text
    try:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response = model.generate_content(user_input)
        await message.answer(response.text)
    except Exception as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini:\n{e}")
